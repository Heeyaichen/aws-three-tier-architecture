AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Three-Tier serverless application with a Lambda function, API Gateway, S3, CloudFront, and DynamoDB.

Parameters:
  BucketName:
    Type: String
    Default: react-spa-frontend
    Description: Name of the S3 bucket for static website hosting.
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Runtime: python3.13
    Environment:
      Variables:
        BUCKET_NAME: !Ref BucketName
        TABLE_NAME: !Ref DynamoDBTable

Resources:
  # Data Tier - DynamoDB 
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: todos
      AttributeDefinitions:
        - AttributeName: id 
          AttributeType: S
      KeySchema:
        - AttributeName: id  # Partition key (Primary Key)
          KeyType: HASH  # This makes 'id' the partition key
      BillingMode: PAY_PER_REQUEST

  # Application Tier - API Gateway & Lambda
  TodoAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  TodoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: todo_function/
      Handler: app.lambda_handler
      Policies: 
        - DynamoDBCrudPolicy:    # AWS Managed Policy (Provides permissions to perform CRUD operations on DynamoDB)
            TableName: !Ref DynamoDBTable
        - AWSLambdaBasicExecutionRole # Provides basic Lambda execution permissions (Allows Lambda functions to write logs to CloudWatch)
  
      Events:
        GetTodos:
          Type: Api #  This creates API Gateway â†’ Lambda integration (automatically uses lambda-proxy integration)
          Properties:
            RestApiId: !Ref TodoAPI # Links the Lambda function to the API Gateway
            Path: /api/todos
            Method: get
        CreateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoAPI
            Path: /api/todos
            Method: post
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoAPI
            Path: /api/todos/{id}
            Method: put
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoAPI
            Path: /api/todos/{id}
            Method: delete

  # Presentation Tier - S3 & CloudFront
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${BucketName}-OAC"
        Description: OAC for S3 bucket hosting the React SPA
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: "" # No OAI needed for public S3 bucket
          # Add API Gateway as second origin
          - Id: ApiOrigin
            DomainName: !Sub "${TodoAPI}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/prod"
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: true
        DefaultRootObject: index.html
        # Cache behaviors for API routing
        CacheBehaviors:
        # Route /api/* to API Gateway
        - PathPattern: "/api/*"
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
            Headers:
              - Authorization
              - Content-Type
          # Cache API responses for 0 seconds (no caching) 
          # No caching for API calls       
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 0
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontS3AccessBucketPolicy:    # This policy allows CloudFront to access the S3 bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontAccess"
            Effect: Allow
            Principal: 
              Service: cloudfront.amazonaws.com
            Action:
              - s3:GetObject
            Resource: 
              - !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
      
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TodoApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${TodoAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  CloudFrontUrl:
    Description: CloudFront Distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"

  S3BucketName:
    Description: Name of the S3 bucket for the React SPA
    Value: !Ref FrontendBucket
